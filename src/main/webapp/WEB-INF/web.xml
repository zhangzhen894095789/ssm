<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1" metadata-complete="true">
	
	<!-- spring上下文监听器，加载项目运行所需的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/spring-*.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- <filter>
		<filter-name>myFilter</filter-name>
		<filter-class>me.zhangzhen.filter.MyFilter</filter-class>
	</filter> -->
	
	<!-- 修改servlet版本为3.1 -->
	<!-- 配置DispatcherServlet -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-mvc.xml,spring-quartz.xml 
			Mybatis - > spring -> springmvc -> quartz -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/mvc/spring-mvc.xml</param-value>
		</init-param>
		<!-- <load-on-startup>1</load-on-startup> -->
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 默认匹配所有的请求 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- spring中文乱码过滤器 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
		<!-- 方式2 与springmvc 集成 -->
<!--   	<servlet-mapping>
	  <servlet-name>springmvc</servlet-name>
	  <url-pattern>/dwr/*</url-pattern>
	</servlet-mapping> -->
	

	<!-- dwr设置 -->  
	<welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  	</welcome-file-list>
  	
<!-- 方式1  --> 
<servlet> 
<servlet-name>dwr-invoker</servlet-name> 
<servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class> 
<init-param> 
<param-name>debug</param-name> 
<param-value>false</param-value> 
</init-param> 

<!-- DWR默认采用piggyback方式 --> 

<!-- 使用polling和comet的方式 --> 
<init-param> 
<param-name>pollAndCometEnabled</param-name> 
<param-value>true</param-value> 
</init-param> 

<!-- comet方式 --> 
<!-- 
<init-param> 
<param-name>activeReverseAjaxEnabled</param-name> 
<param-value>true</param-value> 
</init-param> 
--> 

<!-- polling方式：在comet方式的基础之上，再配置以下参数 --> 
<!-- 
<init-param> 
<param-name>org.directwebremoting.extend.ServerLoadMonitor</param-name> 
<param-value>org.directwebremoting.impl.PollingServerLoadMonitor</param-value> 
</init-param> 
--> 
  
<!-- 毫秒数。页面默认的请求间隔时间是5秒 --> 
<!-- 
<init-param> 
<param-name>disconnectedTime</param-name> 
<param-value>60000</param-value> 
</init-param> 
--> 

<load-on-startup>1</load-on-startup>      
</servlet> 

<servlet-mapping> 
<servlet-name>dwr-invoker</servlet-name> 
<url-pattern>/dwr/*</url-pattern> 
</servlet-mapping> 
<!-- <listener>  
        <listener-class>org.directwebremoting.servlet.EfficientShutdownServletContextAttributeListener</listener-class>  
</listener>  

<listener> 
        <listener-class>org.directwebremoting.servlet.EfficientShutdownServletContextAttributeListener</listener-class> 
</listener>
<listener>  
        <listener-class>org.directwebremoting.servlet.EfficientShutdownServletContextListener</listener-class>  
</listener>  

<listener> 
        <listener-class>org.directwebremoting.servlet.EfficientShutdownServletContextListener</listener-class> 
</listener> -->
</web-app>